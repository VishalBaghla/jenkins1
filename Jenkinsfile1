// MS-Team Integration to Post Build Status Messages
def sendTeamsMessage(color, status, message)
{
  def cause_description =  currentBuild.rawBuild.getCauses()[0].getShortDescription()
  withCredentials([string(credentialsId: 'teams-hook-url-aem-cicd', variable: 'TEAMS_WEBHOOK')])
  {
    office365ConnectorSend color: "${color}",
                           message: "${message}<br>```Cause: ${cause_description}```",
                           status: "${status}",
                           webhookUrl: "${TEAMS_WEBHOOK}"
  }
}
// Marriott Template Engine
def installMITEC() {
  ansiColor('xterm') {
    echo 'MI TEC binary not found. Installing now.'
    sh("curl -s -o mi-tec https://artifactory.marriott.com/artifactory/aad/binaries/mi-tec/3/mi-tec")
    sh("chmod +x ./mi-tec")
  }
}
// Crudini Engine
def installCrudini() {
  ansiColor('xterm') {
    echo 'CRUDINI binary not found. Installing now.'
    sh("curl -s -o crudini https://artifactory.marriott.com:443/artifactory/public-cloud-generic-local/confingparser/crudini")
    sh("chmod +x ./crudini")
  }
}
def getCredentialId(env_name, credential_type) {
  env.credential_type = credential_type
  env.ENVNAME = env_name
  sh("curl -s -o apps.conf https://artifactory.marriott.com:443/artifactory/icd-public-cloud-docker-local/aem/apps.conf")
  def result = sh script: "./crudini --get apps.conf ${ENVNAME} ${credential_type}", returnStdout: true
  return result
}
def cloneMcomCms() {
  repo_name = "mcom-cms"
  def gitUrl = "https://git.marriott.com/mcom-aries-hybrid/" + repo_name
  checkout([$class: 'GitSCM',
  branches: [[name: params.GIT_BRANCH]],
  doGenerateSubmoduleConfigurations: false,
  extensions: [[$class: 'SubmoduleOption',
  disableSubmodules: false,
  parentCredentials: true,
  recursiveSubmodules: false,
  reference: '',
  trackingSubmodules: false
  ]],
  submoduleCfg: [],
  userRemoteConfigs: [[credentialsId: 'GIT', url: gitUrl]],
  extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "mcom-cms"]]
  ])
}
def prepAdobeRepo() {
  sh("mkdir -p adobe-mcom-hws")
  withCredentials([usernamePassword(credentialsId: 'Adobe_Credentials', passwordVariable: 'GIT_PASSWORD', usernameVariable: 'GIT_USERNAME')]) {
    sh """
      cd adobe-mcom-hws
      echo "${params.GIT_BRANCH} -- ${params.COMPONENT}"
      git clone -b "${params.GIT_BRANCH}" https://${GIT_USERNAME}:${GIT_PASSWORD}@git.cloudmanager.adobe.com/marriott-intl/marriott-intl
      rm -rf ${WORKSPACE}/adobe-mcom-hws/marriott-intl/${params.COMPONENT}
    """
  }
}
def isUserAllowedToSkip() {
  def bResults = false
    ansiColor('xterm') {
      script {
        def cause = currentBuild.getBuildCauses('hudson.model.Cause$UserIdCause')
        def currentUser = "${cause.userName}"
        def allowedUsers = ["ssast769","agrud755","rvaru002","pshar707","tbons213","snaru814","lnimm284","sbehe797"]
        for (String usr : allowedUsers) {
          if (currentUser.contains(usr)) {
              bResults = true
          }
        }
      }
    }
  return bResults
}
properties([
    parameters([
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'Application to build (If app not found, update: https://artifactory.marriott.com:443/artifactory/icd-public-cloud-docker-local/active-choices/ariesdev-jenkins/aem_phoenix_apps.json)',
            filterLength: 3,
            filterable: true,
            name: 'COMPONENT',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script:
                        'return [\'Error\']'
                ],
                script: [
                    classpath: [],
                    sandbox: true,
                    script:
                        """
                        aem_mapping_url = "https://artifactory.marriott.com:443/artifactory/icd-public-cloud-docker-local/active-choices/ariesdev-jenkins/aem_phoenix_apps.json"
                        import groovy.json.JsonSlurper
                        def json = aem_mapping_url.toURL().getText(requestProperties: [Accept: 'application/json'])
                        def aemApps = new JsonSlurper().parseText(json)
                        List<String> myList = new ArrayList<>(aemApps.keySet());
                        return myList
                        """
                ]
            ]
        ]
        ,
        [$class: 'ChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'ORG',
            filterLength: 1,
            filterable: false,
            name: 'ORG',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script:
                        'return [\'Error\']'
                ],
                script: [
                    classpath: [],
                    sandbox: true,
                    script:
                        'return ["phoenix"]'
                ]
            ]
        ]
        ,
        [$class: 'CascadeChoiceParameter',
            choiceType: 'PT_SINGLE_SELECT',
            description: 'The git branch within the above repository where the config values live for this VERSION.',
            filterLength: 3,
            filterable: true,
            name: 'GIT_BRANCH',
            referencedParameters: 'ORG,COMPONENT',
            script: [
                $class: 'GroovyScript',
                fallbackScript: [
                    classpath: [],
                    sandbox: false,
                    script:
                        'return [\'Error\']'
                ],
                script: [
                    classpath: [],
                    sandbox: true,
                    script:
                      'return ["develop","stage"]'
                ]
            ]
        ]
        ,

        booleanParam(name: 'SONARQUBE_SCANS', defaultValue: true, description: 'Run SONARQUBE_SCANS'),
        booleanParam(name: 'QUALITY_GATE_CHECK', defaultValue: true, description: 'Run QUALITY GATE CHECK'),
    ])
])
pipeline {
  agent {label 'aws_slave_2'}
  options {
    timestamps()
    ansiColor('xterm')
    buildDiscarder(logRotator(numToKeepStr: '25', artifactNumToKeepStr: '25', daysToKeepStr: '25'))
    disableConcurrentBuilds()
  }
  environment {
    KUBECONFIG=".config"
    APP="${params.COMPONENT}"
    CACHE="${env.CACHE_DIR}"
    // sonar variables
    sources="${env.WORKSPACE}/app/ui.content/src,${env.WORKSPACE}/app/all/src,${env.WORKSPACE}/app/core/src/main/java"
    java_binaries="${env.WORKSPACE}/app/**/target"
    project_key="aem.${APP}"
    sonar_coverage_jacoco_xmlreportpaths = "${env.WORKSPACE}/app/core/target/site/jacoco/jacoco.xml"
    coverage_jacoco_xml_report_paths = "${env.WORKSPACE}/app/core/target/site/jacoco/jacoco.xml"
    APP_VERSION="${env.COMPONENT}.version.${BUILD_NUMBER}"
    sonar_exclusions="**/dataaccess/*,**/jpa/entity/*,**/test/*,**/target/**/*"
    SONARQUBE_SCANS = "${params.SONARQUBE_SCANS}"

    DEPLOY_ENVIRONMENT = "${params.DEPLOY_ENVIRONMENT}"
    VERIFY_TIMEOUT_MINUTES=10
    VERIFY_SLEEP_SECONDS=20
  }
  stages {
    stage("Preproc MI-TEC engine") {
      steps {
        ansiColor('xterm') {
          script {
            installMITEC()
          }
        }
        sh '''
          echo "Removing app folder"
          rm -rf ${WORKSPACE}/app
          rm -rf ${WORKSPACE}/mcom-cms
          rm -rf ${WORKSPACE}/adobe-mcom-hws
        '''
      }
    }
    stage("Clone Component") {
      steps {
        script {
          checkout([$class: 'GitSCM',
          branches: [[name: "${params.GIT_BRANCH}"]],
          doGenerateSubmoduleConfigurations: false,
          extensions: [[$class: 'SubmoduleOption',
          disableSubmodules: false,
          parentCredentials: true,
          recursiveSubmodules: false,
          reference: '',
          trackingSubmodules: false
          ]],
          submoduleCfg: [],
          userRemoteConfigs: [[credentialsId: 'GIT', url: "https://git.marriott.com/${env.ORG}/${env.COMPONENT}"]],
          extensions: [[$class: 'RelativeTargetDirectory', relativeTargetDir: "app"]]
          ])
        }
        // make a copy of the repo
        sh '''
          rm -rf ${WORKSPACE}/${COMPONENT}
          orig_repo_dir=${WORKSPACE}/${COMPONENT}
          mkdir -p ${orig_repo_dir}
          cp -pr ${WORKSPACE}/app/* ${orig_repo_dir}/.
        '''
      }
    }
    stage("Update Description") {
      steps {
        ansiColor('xterm') {
          script {
            currentBuild.displayName = "#${env.BUILD_NUMBER} ${params.COMPONENT}:${params.GIT_BRANCH}"
          }
        }
      }
    }
    stage('Build') {
      steps {
        ansiColor('xterm') {
          script {
            docker.withRegistry('https://dtr.tools.cloud.marriott.com', 'DTR') {
              docker.image("dtr.tools.cloud.marriott.com/base-images/build-machine:v2").inside("-v ${env.WORKSPACE}:/data/jenkins/cache") {
                sh '''
                  ## install nodejs
                  curl -o ${WORKSPACE}/nodejs.tgz  https://artifactory.marriott.com:443/artifactory/hybrid-aem/nodejs/node-v16.14.2-linux-x64.tar.gz
                  tar xf ${WORKSPACE}/nodejs.tgz
                    export PATH=${PATH}:${WORKSPACE}/node-v16.14.2-linux-x64/bin
                    export NPM_CONFIG_PREFIX=/tmp/.npm-global
                    export NPM_CONFIG_CACHE=/tmp
                       if [ -d ${WORKSPACE}/app/ui.frontend/marriottDependencies ]
                        then
                          cd ${WORKSPACE}/app/ui.frontend/marriottDependencies
                          cd ${WORKSPACE}/app/ui.frontend/marriottDependencies/
                          echo "******* Running NPM INSTAALL *********"
			  ${WORKSPACE}/node-v16.14.2-linux-x64/bin/node -v
                          ${WORKSPACE}/node-v16.14.2-linux-x64/bin/npm install
                      fi
                          cd ${WORKSPACE}/app
                          pwd
                          mvn clean test install
                '''
                junit allowEmptyResults: true, testResults: 'core/target/surefire-reports/*.xml'
                jacoco()
              }
            }
          }
        }
      }
    }

    stage('SonarQube Scan') {
      steps {
        ansiColor('xterm') {
          installMITEC()
          script {
            env.ALLOWED_TO_SKIP = isUserAllowedToSkip()
            dir("app"){
              docker.withRegistry("https://dtr.tools.cloud.marriott.com", 'DTR') {
                docker.image("${env.DTR_HOST}/build-images/sonarqube-scanner").inside("-v ${env.WORKSPACE}:${env.WORKSPACE}"){
                  withSonarQubeEnv('sonarqube'){
                    sh """
                      set +x
                      if [ $SONARQUBE_SCANS == "false" ] && [ ${ALLOWED_TO_SKIP} == "true" ]
                      then
                        echo "Skipping Sonaqube Scan"
                      elif [ "$COMPONENT" == "mcom-platform" ] || [ "$COMPONENT" == "mi-aem-platform" ]
                      then
                        echo "Skipping Sonaqube Scan for $COMPONENT"
                      else
                        echo ""
                        mi-tec -t /opt/sonarqube-scanner/sonar-project.properties
                        cat /opt/sonarqube-scanner/sonar-project.properties
                        sonar-scanner -Dproject.settings=/opt/sonarqube-scanner/sonar-project.properties
                      fi
                     """
                   }
                 }
               }
             }
           }
         }
       }
     }
     stage('Quality-Gate') {
       steps {
         script {
           env.ALLOWED_TO_SKIP = isUserAllowedToSkip()
           if ( isUserAllowedToSkip() && params.QUALITY_GATE_CHECK == false) {
             echo "Skipping Quality Checks"
           } else if ( params.COMPONENT.equalsIgnoreCase("mi-aem-platform") ) {
             echo "Quality Checks Skipped for platform"
           } else {
             timeout(time:10, unit:'MINUTES') {
               def qg = waitForQualityGate();
               if (qg.status != 'OK') {
                 error "Pipeline aborted due to quality gate failure: ${qg.status}"
               } else {
                 echo "Quality Gate Status: ${qg.status}"
               }
             }
           }
         }
       }
     }
     stage('Sync') {
       steps {
         // clone adobe repo
         prepAdobeRepo()
         // add and commit
         sh '''
          set +x
          ## copy
          rm -rf ${WORKSPACE}/adobe-mcom-hws/marriott-intl/${COMPONENT}
          ## copy maven dependencies
          #if [ -d ${WORKSPACE}/app/ui.frontend/marriottDependencies ]
          #then
            # cp -pr ${WORKSPACE}/app/ui.frontend/marriottDependencies ${WORKSPACE}/adobe-mcom-hws/marriott-intl/${COMPONENT}/.
          #fi
          cp -pr ${WORKSPACE}/${COMPONENT} ${WORKSPACE}/adobe-mcom-hws/marriott-intl/.
          ## NPN generaated folder
          if [ -d ${WORKSPACE}/app/ui.frontend/marriottDependencies ]
          then
            cp -pr ${WORKSPACE}/app/ui.frontend/marriottDependencies ${WORKSPACE}/adobe-mcom-hws/marriott-intl/${COMPONENT}/ui.frontend/.
          fi
          cd ${WORKSPACE}/adobe-mcom-hws/marriott-intl/${COMPONENT}
          ## cms
          yml_fn=${WORKSPACE}/${BUILD_NUMBER}.yaml
          echo "---" > $yml_fn
          echo "modules:" >> $yml_fn
          comps=$(echo $COMPONENT|sed 's|,| |g')
          for comp in $comps
          do
            echo "  $comp: $comp" >> $yml_fn
          done
          ${WORKSPACE}/mi-tec --load $yml_fn --template ${WORKSPACE}/pom_cms.xml
          cp -R ${WORKSPACE}/pom_cms.xml ${WORKSPACE}/adobe-mcom-hws/marriott-intl/pom.xml
          git config --global user.email "ariesdev-jenkins@marriott.com"
          git config --global user.name "ariesdev-jenkins"
          git add . --all
          git status
          rc=$(git status --porcelain|wc -l)
          if [ $rc -ne 0 ]
          then
            git commit -am "adding mcom-cms/pom.xml and $COMPONENT"
            git push
            if [ $? -eq 0 ]
            then
              echo "Successfully Git Sync'd $COMPONENT to Adobe Repo"
            fi
          fi
         '''
       }
     }
  }
}
